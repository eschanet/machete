#!/usr/bin/env python3

'''
This script transforms pyHF JSON output into HF harvests, used for the traditional HF plotting scripts.
'''

import os
import glob
import argparse
import json

import logging
from commonHelpers.logger import logger
logger = logger.getChild("machete")

parser = argparse.ArgumentParser(description="Script to convert pyHF JSON output into HF harvest JSON")
parser.add_argument("--input", "-i", help="Input JSON files (allows wildcarding)", default="*.json")
parser.add_argument("--output", "-o", help="Output harvest file", default="harvest.json")
args = parser.parse_args()

def is_file_empty(filename):
    """ Check if file is empty by confirming if its size is 0 bytes"""
    return os.path.isfile(filename) and os.path.getsize(filename) == 0

output_data = []

for filename in glob.glob(args.input):
    # Check for format of input jsons
    if not "Sig_C1N2_Wh_hbb_" in filename:
        logger.error("I'm expecting a different input format, sorry.")
        continue
    if is_file_empty(filename):
        logger.error("File seems to be empty")
        continue

    logger.info("Processing %s" % filename)
    with open(filename) as f:
        json_data = json.load(f)
        masses = os.path.basename(filename).replace("Sig_C1N2_Wh_hbb_","").replace("_NoSys.json","").replace("p0",".0").replace("p5",".5").split("_")
        output_data.append(
            {
                "CLs" : json_data["CLs_obs"],
                "clsd2s" : json_data["CLs_exp"][0],
                "clsd1s" : json_data["CLs_exp"][1],
                "CLsexp" : json_data["CLs_exp"][2],
                "clsu1s" : json_data["CLs_exp"][3],
                "clsu2s" : json_data["CLs_exp"][4],
                "nlsp" : float(masses[0]),
                "lsp" : float(masses[1]),
                "upperLimit": -1.000000e+00,
                "expectedUpperLimit" : -1.000000e+00,
            }
        )

with open(args.output, 'w') as outfile:
    json.dump(output_data,outfile)
